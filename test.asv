%% Close all figures, clear workspace and console
close all;
clear;
clc;




%% Application (Maybe Hamming code!!!)


n = 3;
H = ham_par(n)
P = H(:, 1:(2^n-1-n));
G = [eye(2^n-1-n) P']
m = 2^n - n - 1;                % rows of G

u_list = dec2bin(0:2^m-1)-'0';



codewords = ones(2^m,2^n-1);

for i = 1:2^m
    codewords(i,:) = mod(u_list(i,:)*G,2);
end
codewords;

%% Simulating the Binary Symmetric Channel

% Initialize error prob & data

er = 0.1;
len = size(codewords, 2);
% Random codeword ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
in_data = codewords(3,:);
x = zeros(1, len);

for i = 1:length(in_data)
    
    if in_data(i) == 0
        x(i) = 1;
    else
        x(i) = -1;
    end
    
end

disp("x = " + num2str(x))
%disp("initial data is: "+num2str(in_data));
[out_data,err] = bsc(in_data,er);
%disp("output data is: "+num2str(out_data));
disp("errors: "+num2str(err));

y = zeros(1, len);
for i = 1:length(out_data)
    
    if out_data(i) == 0
        y(i) = 1;
    else
        y(i) = -1;
    end
    
end
disp("y = " + num2str(y))

%% Graph
chan_node = lk(x, y, er);

check_nodes_receive = cell(1, n);
for i = 1:n
    
   check_nodes_receive{i} = check_node(H,i,chan_node);
    
end

check_nodes_sent = check2var(check_nodes_receive, n);
var_nodes_receive = var_rec(check_nodes_sent);
var_values = map_detection(var_nodes_receive);
var_values



% temp = mod(H*var_node',2);